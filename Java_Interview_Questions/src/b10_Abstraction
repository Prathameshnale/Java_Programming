1. What is Abstraction?

-> Hiding the irrelevant implementation details of code and exposing only necessary information to the user is called as Abstraction.
   It reduces the complexity of the code by ignoring the irrelevant details.
   e.g -> Car - You start the car by pressing the start button and off the car by pressing the off button of car.in this case
                you need not to know how the engine will start by pressing the start button. so all of the un-necessary parts of engine
                are hidden from you and only necessary parts of a car only accessible to you.
                
  
  In java Abstraction is achieved by using keyword abstract to the class and interface.
  
  
  1. By making the class abstract.
  
  
  
  	what is abstract method ?
  	
  	-> The method does not have the implementation for the declaration and declared with the abstract keyword is called as abstract method.
  	
  	e.g    abstract public void show();   //abstract method
  	
  	
  	
  	
  
   	What is abstract class ?
   	
   	-> A class which can have at list one abstract method or a class that is restricted to make a object is called as abstract class.
   	
   	 	Rules -> 
   	 		-If any class has at list one method abstract then that class becomes the abstract class and to write abstract keyword 
   	 		with the class is mandatory otherwise it will shows the error
   	 		-If class is abstract then all the abstract methods only present inside that abstract class are compulsory to override into the
   	 		inherited child classes and all extended child classes must have to write the implementation of the method(implementation may be
   	 		different) otherwise make that class abstract.
   	 		-We cannot make the object of abstract class but we can make the reference of abstract class which will point to the object 
   	 		of it's non-abstract child classes.
   	 		-we cannot have the abstract constructor inside abstract class but we can have the constructor in abstract class which will
   	 		be called from it's child constructor by using the super() keyword.
   	 		
   	 		
 			   
   	   
   	   e.g     
   	   
   	   abstract class Parent{
		
			String name;
			Parent(String name){
				this.name=name;
			}
			
			abstract public void show();
		}
	
	
		class Child extends Parent{
	
			String email;
			
			Child(String name,String email){
				super(name);
				this.email=email;
			}
	
			@Override
			public void show() {
				System.out.println("inside child show");
				
			}
			
		}


		public class demo {
	
			public static void main(String[] args) {
				
				// Parent p = new Parent("prathamesh"); //not allowed
			
				Parent p = new Child("prathamesh","prathamesh@gmail.com");
				Child c = new Child("arjun","arjun@gmail.com");
			}
	
		}
		
		
		
		
		
		
	2. By making the interface -> 
	
	
	what is interface ?
	
	->Interface is a blueprint of a class. It has only public,static,final variable,default methods,static methods and abstract methods.
	
	Rules ->
	
		-All the variables inside the interface are considered as public static and final.
		-Method inside interface have only declaration without implementation except default and static methods.
		-All the methods are compulsory to override inside implemented class or extended interface except static and default.
		-we cannot override static method inside implemented class or interface.
		-we may or may not override the default method inside implemented class or interface. If we not override then it will 
		 call automatically from the interface and if we override then it will call from the implemented class or interface. and
		 If we override default method then implementation of that method inside interface and implemented class may be differ.while
		 calling it will call from the implemented class if present.
		-We can implement/inherit multiple interface inside class by using keyword implement.
		-One interface can extend any number or multiple interfaces using keyword extend separated by comma.
		-One class can implement multiple interfaces by using keyword implement separated by comma.
		-class cannot extend multiple classes.
		-interface cannot extend or implement any class.
		-All the methods inside the interface are considered as public so writing keyword public is optional.
		
	
	
	
2. what is use of Interface OR Why interface?
	
	-> Interface in java are used to achieve the abstraction and multiple inheritance in java.
	
	
3. Can an interface have variable?
	
	-> Yes, interface has variables they are by default public static and final.
	
	
4. What is difference between Abstract class and interface?
	
	->-Abstract class represent Is-A relationship with child class but interface cannot represent Is-A relationship.
	  -Abstract class can override methods of object class. but interface cannot override object class methods.
	  -Abstract class can have constructor but interface cannot have constructor.
	  -All the variable can be public,private,protected or default but in interface variables are by default public,static and final.
	  -One class extend only one class cannot extend multiple classes but one interface can implement multiple interfaces.
	
	
	
5. Can Abstract class have constructor?
	
	->Yes abstract class have constructor and it is called when the object of it's sub class is created. and 
	  it is invoke or passed the arguments from it's base class constructor by using the super() method.
	
	
6. What is default method in interface?

   ->Non abstract method which defined inside the interface with the keyword default and it's implementation which can be used
     as default method inside the implemented class is called as default method.
    -we can be or cannot be override default method inside implemented class with it's implementation but if two interfaces having 
     same name default method is present and that two interfaces are implemented in same class then it is mandatory to override
     the defualt method.     
     
	e.g 
	    interface Person{
			public void walk();
			
			default public void eat() {
				System.out.println("Should eat veg only");
			}
		}
		
		class Employee implements Person{
		
			@Override
			public void walk() {
				System.out.println("Can be walk");	
			}
		}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p = new Employee();
				p.walk(); 									 //calling abstract method
				p.eat();  									//calling default method
		
			}
		}
	
7. Why default method?

-> If we may want to particular method inside classes without overriding in that case to avoid overriding or to reduce coding
   complexity we can use default methods.
   
   
	
8. What is static method in interface?

->	Static methods are same as default methods but we cannot override the static methods inside the implemented classes.
    to call the static method inside implemented class we should use interfaceName.staticMethodName.
    
    e.g
		interface Person{
			public void walk();
			
			public static void run() {
				System.out.println("Can be Run on two legs");
			}
		}
		
		class Employee implements Person{
		
			@Override
			public void walk() {
				System.out.println("Can be walk");	
			}
		
		}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p = new Employee();
				p.walk();  //calling abstract method
				Person.run();  //calling static method with the help of interface Name.
		
			}
		}
	
	
9. why static methods?

-> Java interface static method helps us in providing security by not allowing implementation classes to override them.
	