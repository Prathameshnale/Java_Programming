1. what is final class in Java?

-> A class declared with final keyword which cannot be inherited further is called as final class.

	e.g 
		final class Person{
			private String name;
			public int id;
			
			public void info() {
				System.out.println("Inside info method of Person class");
			}	
		}
		
		//class Student extends Person{   //not allowed
		//	
		//}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p1 = new Person();
				p1.info();
						
			}
		}



2. what is final method in Java?

->A method which declared with final keyword and which cannot be override further is called as final method.

	e.g 
	
		class Person{
			private String name;
			public int id;
			
			final public void info() {
				System.out.println("Inside info method of Person class");
			}	
			
			public void info(int a) {
				System.out.println("Inside info method of Person class");
			}
		}
		
		class Student extends Person{  
			
		//	public void info() {                                               //not allowed
		//		System.out.println("Inside info method of Student class");
		//	}
		}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p1 = new Person();
				p1.info();
						
			}
		}



3. what is final variable in java?

->Variable declared with keyword final is called as final variable which cannot be modified/changed once declared and it is mandatory
  to initialize the final variable at the time of declaration.
  
  e.g 
  
	  class Person{
			//final int a1;  //not allowed
			
			final int a=5;
			
			//a=10;    //not allowed
			
			public void info() {
				System.out.println("Inside info method of Person class");
			}	
		}
		
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p1 = new Person();
				p1.info();			
			}
		}





4. What is static variable in java?

->The variable declare with static keyword which is class level variable having only one copy of the memory and it belongs to the class
  rather than any specific instance/object of class.
  -By default static variable is initialized with value 0.
  
  e.g 
	  	class Person{
		
			static int a=1;
			
			public void info() {
				System.out.println("Inside info method of Person class");
			}	
		}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Person p1 = new Person();
				p1.info();
				System.out.println("a = "+p1.a);
			}
		}




5. What is final keyword used in java?

-> The final keyword used in java to define the variable,methods,classes which cannot be modified further.



6. What is static keyword in Java?

-> static keyword is used to define the class level entity like methods and variable. which belongs to the class rather than any 
   object or instance of class.
   
   
   
7. How do you prevent the method from being overridden in java?

-> By making the method final we can prevent the method overriding in java.



8. How do you prevent the class from being inherited in java?

-> By making the class final we can prevent the inheritance in java. cause we cannot inherited the final class.


9. Can a class can be both final and abstract?

-> No, because we cannot inherit the final class and abstraction need to perform the inheritance so we cannot use both final and abstract.


10. What is purpose of toString() method?

-> toString() method is used to convert object into it's string representation format. or used to provide meaningful representation of object.


11. what is the equals() method used for?

-> equals() method is used for to compare/check the content of two objects is equal or not. It returns the boolean value.


12. What is hashCode() method used for?

-> Hashcode method is used to generate the unique integer value for the object. and these values are used to store the object inside
   collections like Hashmap, Hashset and Hashtable.



13. what is the purpose of clone() method in java?

-> The clone() method in java is used to copy the object but to use the clone method we need to implement the clonable interface.



14. What is instance initializer block is used for?

-> Instance initializer block is used for to initialize the instance variable when the object/instance is created. Instance initializer block
   is invoke/execute every time when the new instance of the class is created.
   -When instance is created the compiler will copy the statements from instance initializer block and paste it inside the constructor.
   -so when object is created first constructor is invoke and call the super constructor if any super() or this() method is present at
    first line of constructor then it will call super class constructor and then execute the code of instance initializer block and 
    then execute the statements of that particular constructor.
   -if there is no super() or this() method inside constructor then first instance initializer statements will be execute and then
    that particular constructor's statements are executed.
    
    
    
   e.g - 1.
   
	   	class Person{
	
			Person(){
				System.out.println("Inside Person constructor");
			}	
		}
		
		
		class Employee extends Person{
			private int pid;
			Employee()
			{
				super();
				System.out.println("Inside Employee constructor");
			}
			{
				pid=8876;
				System.out.println("value of pid = "+pid);
			}
		}
		
		public class Demo1 {
		
			public static void main(String[] args) {
				Employee e1 = new Employee();	
			}
		}

	output ->
		Inside Person constructor
		value of pid = 8876
		Inside Employee constructor


	  e.g - 2.
	  
		  	class Person{
		
				private int pid;
				
				Person(){
					System.out.println("Inside Person constructor");
				}	
				
				{
					pid=8876;
					System.out.println("value of pid = "+pid);
				}
			}
			
			
			class Employee extends Person{
			
				Employee()
				{
					super();
					System.out.println("Inside Employee constructor");
				}
				
			}
			
			public class Demo1 {
			
				public static void main(String[] args) {
					Employee e1 = new Employee();	
				}
			}
			
		output ->
			value of pid = 8876
			Inside Person constructor
			Inside Employee constructor




15. What is static initializer block used for?

-> Static block or static initializer block are used to initialize the static fields/data member inside the class.
   we declared static block when we want to initialize the static members. Static block is executed only once through out the 
   program. It executes when the class loader loads the class.
   -Static block executes before the constructor of that class execute, before the main method is called and before the object of class
   is created.
   static block declared with static keyword followed by curly bracket 
   e.g    static{
   
          }



16. What is method hiding in java?

-> If subclass and superclass both having the static method with the same name and signature,then method in subclass hide the method
   in super class is called as method hiding. It happens because static methods are resolved at the time of compilation.
   
   
 e.g 
 
		class Person{
		
			public static void display() {
				System.out.println("Display of Person");
			}
		}
		
		
		class Employee extends Person{
		
			public static void display() {
				System.out.println("Display of employee");
			}
		}
		
		
		public class Demo1 {
		
			public static void main(String[] args) {
					Person p1 = new Person();
					Person p2 = new Employee();
					
					p1.display();
					p2.display();
			}
		}

		output->
		
			Display of Person
			Display of Person













